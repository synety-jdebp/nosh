/* COPYING ******************************************************************
For copyright and licensing terms, see the file named COPYING.
// **************************************************************************
*/

#include <sys/types.h>
#include <sys/wait.h>
#include <cerrno>
#include <csignal>
#include "utils.h"

#if !defined(WSTOPPED)
#define WSTOPPED WUNTRACED
#endif

/* Waiting for child processes **********************************************
// **************************************************************************
// 
// This form of the library uses the new waitid() function.
// That separates process group IDs from process IDs.
// It also makes WEXITED explicit.
*/

static inline
int
make_status (
	const siginfo_t & si
) {
	switch (si.si_code) {
		case CLD_EXITED:	return W_EXITCODE(si.si_status, 0);
		case CLD_KILLED:	return W_EXITCODE(0, si.si_status);
		case CLD_DUMPED:	
		{
			const int s(W_EXITCODE(0, si.si_status));
			return WCOREDUMP(s);	// This macro is utterly ridiculous in the GNU C library.
		}
		case CLD_STOPPED:	return W_STOPCODE(si.si_status);
		case CLD_TRAPPED:	return W_STOPCODE(si.si_status);
		default:
		case CLD_CONTINUED:	return WCONTINUED;
	}
}

static inline
int	/// \retval -1 error \retval 0 no child \retval >0 found child
wait_for_anychild (
	pid_t & child,
	int & status,
	int flags
) {
	for (;;) {
		siginfo_t si;
		const int rc(waitid(P_ALL, -1, &si, flags));
		if (0 > rc) {
			if (EINTR != errno) return -1;
		} else 
		if (0 == si.si_pid || 0 == si.si_signo) 
			return 0;
		else {
			status = make_status(si);
			child = si.si_pid;
			return 1;
		}
	}
}

int	/// \retval -1 error \retval 0 no child \retval >0 found child
wait_nonblocking_for_anychild_stopcontexit (
	pid_t & child,
	int & status
) {
	return wait_for_anychild(child, status, WNOHANG|WSTOPPED|WCONTINUED|WEXITED);
}

int	/// \retval -1 error \retval 0 no child \retval >0 found child
wait_nonblocking_for_anychild_stopexit (
	pid_t & child,
	int & status
) {
	return wait_for_anychild(child, status, WNOHANG|WSTOPPED|WEXITED);
}

int	/// \retval -1 error \retval 0 no child \retval >0 found child
wait_nonblocking_for_anychild_exit (
	pid_t & child,
	int & status
) {
	return wait_for_anychild(child, status, WNOHANG|WEXITED);
}

int	/// \retval -1 error \retval 0 no child \retval >0 found child
wait_blocking_for_anychild_exit (
	pid_t & child,
	int & status
) {
	return wait_for_anychild(child, status, WEXITED);
}

static inline
int	/// \retval -1 error \retval 0 no child \retval >0 found child
wait_for_event_of (
	const pid_t child,
	int & status,
	int flags
) {
	for (;;) {
		siginfo_t si;
		const int rc(waitid(P_PID, child, &si, flags));
		if (0 > rc) {
			if (EINTR != errno) return -1;
		} else 
		if (0 == si.si_pid || 0 == si.si_signo) 
			return 0;
		else {
			status = make_status(si);
			return 1;
		}
	}
}

int	/// \retval -1 error \retval 0 no child \retval >0 found child
wait_nonblocking_for_stopcontexit_of (
	const pid_t child,
	int & status
) {
	return wait_for_event_of(child, status, WNOHANG|WSTOPPED|WCONTINUED|WEXITED);
}

int	/// \retval -1 error \retval 0 no child \retval >0 found child
wait_nonblocking_for_stopexit_of (
	const pid_t child,
	int & status
) {
	return wait_for_event_of(child, status, WNOHANG|WSTOPPED|WEXITED);
}

int	/// \retval -1 error \retval 0 no child \retval >0 found child
wait_blocking_for_exit_of (
	const pid_t child,
	int & status
) {
	return wait_for_event_of(child, status, WEXITED);
}
